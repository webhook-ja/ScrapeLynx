version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: temu_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-temu_db}
      POSTGRES_USER: ${DATABASE_USER:-temu_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-change_this_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-temu_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (para caché futuro)
  redis:
    image: redis:7-alpine
    container_name: temu_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API de Temu Scraper
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: temu_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_TYPE: postgresql
      DATABASE_URL: postgresql://${DATABASE_USER:-temu_user}:${DATABASE_PASSWORD:-change_this_password}@postgres:5432/${DATABASE_NAME:-temu_db}

      # Redis
      REDIS_URL: redis://redis:6379/0

      # Temu Affiliate
      TEMU_AFFILIATE_ID: ${TEMU_AFFILIATE_ID}

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      LLM_PROVIDER: ${LLM_PROVIDER:-openai/gpt-4o-mini}

      # Scraping Config
      MAX_CONCURRENT_REQUESTS: ${MAX_CONCURRENT_REQUESTS:-3}
      REQUEST_DELAY_SECONDS: ${REQUEST_DELAY_SECONDS:-2}

      # App Config
      PORT: 8000
      ENVIRONMENT: ${ENVIRONMENT:-production}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - ./results:/app/results
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Nginx para servir archivos estáticos)
  frontend:
    image: nginx:alpine
    container_name: temu_frontend
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "${FRONTEND_PORT:-80}:80"
    volumes:
      - ./frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
